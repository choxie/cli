name: CLI Automated Release
on:
  push:
  # workflow_dispatch:
  #   inputs:
  #     releaseVersion:
  #       description: "The version number of the new release"
  #       required: true
jobs:
  build:
    name: Build
    strategy:
      matrix:
        node-version: [12.x]
        platform: [ubuntu-latest]

    runs-on: ${{ matrix.platform }}

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      # if we don't do this, Git will convert all line endings to CRLF when cloning on windows
      - name: Set Git to use Linux-style line endings
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Check out turbot-core
        uses: actions/checkout@master
        with:
          repository: turbotio/turbot-core
          token: ${{ secrets.turbot_core_pac }}
          ref: master

      - name: Use Node.js ${{ matrix.node-version }} on ${{ matrix.platform }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache HIT/MISS
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}

      - name: Install npm packages
        run: |
          npm install
          echo ::set-env name=PATH::"$PATH:$(pwd)/node_modules/.bin"
          echo ::set-env name=NODE_PATH::"$GITHUB_WORKSPACE/lib"

      - name: Build CLI Binaries
        run: |
          echo $PATH
          echo $NODE_PATH
          ls $GITHUB_WORKSPACE/node_modules/.bin/nexe
          cd $GITHUB_WORKSPACE/lib/@turbot/cli
          ./compile.sh

      - name: Read package.json
        uses: tyankatsu0105/read-package-version-actions@v1
        id: package-version
        with:
          path: lib/@turbot/cli

      - name: Show version number
        run: echo "Version is ${{ steps.package-version.outputs.version }}"

      - name: Move build artifacts
        run: |
          mkdir $HOME/artifacts
          mv $GITHUB_WORKSPACE/lib/@turbot/cli/dist/turbot_cli_${{ steps.package-version.outputs.version }}_windows_amd64.zip $HOME/artifacts/windows.zip
          mv $GITHUB_WORKSPACE/lib/@turbot/cli/dist/turbot_cli_${{ steps.package-version.outputs.version }}_linux_amd64.zip $HOME/artifacts/linux.zip
          mv $GITHUB_WORKSPACE/lib/@turbot/cli/dist/turbot_cli_${{ steps.package-version.outputs.version }}_darwin_amd64.zip $HOME/artifacts/darwin.zip

      - name: List Build Artifacts
        run: |
          echo $HOME
          ls -l $HOME/artifacts

      - name: Save Windows Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact-windows
          path: $HOME/artifacts/windows.zip

      - name: Save Linux Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact-linux
          path: $HOME/artifacts/linux.zip

      - name: Save Windows Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact-darwin
          path: $HOME/artifacts/darwin.zip
          
      - name: List Test Suite
        run: |
          echo $HOME
          ls -l $GITHUB_WORKSPACE/lib/@turbot/cli/test

      - name: Zip up Acceptance Test Suite
        uses: montudor/action-zip@v0.1.0
        with:
          args: zip -qq -r $HOME/artifacts/tests.zip . -i $GITHUB_WORKSPACE/lib/@turbot/cli/test

      - name: Save Acceptance Test Suite
        uses: actions/upload-artifact@v2
        with:
          name: test-artifact
          path: $HOME/artifacts/tests.zip

    outputs:
      version: ${{ steps.package-version.outputs.version }}

  acceptance_tests:
    name: Run Acceptance Tests
    needs: build

    strategy:
      matrix:
        node-version: [12.x] # this is required for the nunjucks-cli
        platform: [ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.platform }}

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Prepare for downloads
        id: prepare-for-downloads
        run: |
          mkdir $HOME/artifacts

      - name: Download Windows Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact-windows
          path: $HOME/artifacts

      - name: Download Linux Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact-linux
          path: $HOME/artifacts

      - name: Download Darwin Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact-darwin
          path: $HOME/artifacts

      - name: Download Acceptance Test Suite
        id: download-acceptance-suite
        uses: actions/download-artifact@v2
        with:
          name: test-artifact
          path: $HOME/artifacts

      - name: Check that everything got downloaded
        run: |
          ls -l $HOME/artifacts
  # if we don't do this, Git will convert all line endings to CRLF when cloning on windows
  #     - name: Set Git to use Linux-style line endings
  #       run: |
  #         git config --global core.autocrlf false
  #         git config --global core.eol lf
  #     - name: Check out turbot-core
  #       uses: actions/checkout@master
  #       with:
  #         repository: turbotio/turbot-core
  #         token: ${{ secrets.turbot_core_pac }}
  #         ref: master
  #         # we need this since the bats repo is a submodule
  #         submodules: true
  #     - name: Use Node.js ${{ matrix.node-version }} on ${{ matrix.platform }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - name: Install Dependencies
  #       run: npm install -g nunjucks-cli
  #     - name: Setup Config Dir
  #       run: |
  #         mkdir -p ~/.config/turbot
  #         touch ~/.config/turbot/config.yml
  #         touch ~/.config/turbot/credentials.yml
  #         touch ~/.config/turbot/registry.yml
  #     - name: Run Test Suite
  #       run: |
  #         chmod +x $GITHUB_WORKSPACE/lib/@turbot/cli
  #         $GITHUB_WORKSPACE/lib/@turbot/cli/test/run_acceptance.sh
  # release:
  #   name: Release
  #   needs: acceptance_tests
  #   runs-on: ubuntu-latest
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - name: Do Nothing
  #       run: echo "Do Nothing"
  #
  #
  #
  #
  #
  #
  #
  # - name: Create Release
  #   id: create_release
  #   uses: actions/create-release@latest
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   with:
  #     tag_name: ${{  steps.package-version.outputs.version }}
  #     release_name: ${{  steps.package-version.outputs.version }}
  #     body: See https://turbot.com/v5/docs/releases/cli
  #     draft: false
  #     prerelease: false
  # - name: Upload Mac Release Asset
  #   uses: actions/upload-release-asset@v1
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   with:
  #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
  #     asset_path: dist/turbot_cli_${{ steps.package-version.outputs.version }}-beta.2_darwin_amd64.zip
  #     asset_name: urbot_cli_${{ steps.package-version.outputs.version }}-beta.2_darwin_amd64.zip
  #     asset_content_type: application/zip
  # - name: Upload Linux Release Asset
  #   uses: actions/upload-release-asset@v1
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   with:
  #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
  #     asset_path: dist/turbot_cli_${{ steps.package-version.outputs.version }}-beta.2_linux_amd64.zip
  #     asset_name: urbot_cli_${{ steps.package-version.outputs.version }}-beta.2_linux_amd64.zip
  #     asset_content_type: application/zip
  # - name: Upload Windows Release Asset
  #   uses: actions/upload-release-asset@v1
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   with:
  #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
  #     asset_path: dist/turbot_cli_${{ steps.package-version.outputs.version }}-beta.2_windows_amd64.zip
  #     asset_name: urbot_cli_${{ steps.package-version.outputs.version }}-beta.2_windows_amd64.zip
  #     asset_content_type: application/zip
